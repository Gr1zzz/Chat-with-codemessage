  public  Message Rashifr()  {
        String password = "";
        try (FileReader reader = new FileReader("password.txt")) {
        int c;
            while ((c = reader.read()) != -1) {

            password+= (char) c;
            // System.out.print((char)c);
            }
        }
        catch (IOException ex) {

        System.out.println(ex.getMessage());
        }
        char[] pass = password.toCharArray();
        String line = this.getData();
        String line1 = line.substring(line.indexOf(':')+2);
        char[] mass = line1.toCharArray();
        String ras = "";
        int k = 0;

        //231654
        while (k < line1.length()){
            int count = 1;
            for (int i = 0; i < pass.length; i ++){
                for(int j = 0; j < pass.length; j ++){
                  if(Character.getNumericValue(pass[j]) == count){
                      count ++;
                      ras = ras + mass[k + j];
                  }
                }
            }
            //ras = ras + mass[k + 2] + mass[k]+mass[k+1]+mass[k + 5]+mass[k + 4] + mass[k + 3];
            k = k +6;
        }
        this.data =  line.substring(0, line.indexOf(':')+2)+ ras;
        return this;
}
  public Message Shifr()  {
         String password = "";
         try (FileReader reader = new FileReader("password.txt")) {
             int c;
             while ((c = reader.read()) != -1) {

                  password+= (char) c;
                 // System.out.print((char)c);
             }
         } catch (IOException ex) {

             System.out.println(ex.getMessage());
         }
         char[] pass = password.toCharArray();
        String text = this.getData();
         while (text.length() % 6 != 0) {
             text = text + " ";
         }
         int k = 0;
         char[] mass = text.toCharArray();
         String shif = "";
         //231654
         while (k < text.length()){
             shif = shif + mass[k + Character.getNumericValue(pass[0]) -1] + mass[k + Character.getNumericValue(pass[1]) -1]+
                     mass[k + Character.getNumericValue(pass[2]) -1]+mass[k + Character.getNumericValue(pass[3]) -1]+
                     mass[k + Character.getNumericValue(pass[4]) -1] + mass[k + Character.getNumericValue(pass[5]) -1];
             k = k +6;
         }
         this.data = shif;
        return this;
}